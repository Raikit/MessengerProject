/* UPLOAD THIS TO GITHUB WHEN YOU HAVE ACCESS TO INTERNET!!!!!!! */

package gibbler2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aisha
 */

import java.util.Scanner;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

public class Gibbler2 {

    
    public void Gibbler2(){
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        Gibbler2 gibbler = new Gibbler2();
        User current = new User();
        //Create group
        Scanner in = new Scanner(System.in);
        
        String ans;
        boolean alreadyExists = false;
        
        //Search through posts and display all public ones.
        Display guest = new Display();
        Display user = new Display();
        
        guest.viewFeed(null);
        
        System.out.println("Welcome to Gibbler! How can we assist you?\n1. Register an Account\n2. Register an Admin Account\n3. Login\n4.Search\n5. View Feed");
        ans = in.nextLine();
        
        if (ans.equals("Register an Account")){
            gibbler.Register();
        }
        
        if (ans.equals("Register an Admin Account")){
            gibbler.RegisterAsAdmin();
        }
        
        if (ans.equals("Login")){
            
            current = gibbler.LogIn();
            user.viewFeed(current.getUN());
            
        }
        
        while (!ans.equals("Logout")){
            
            System.out.println("What section do you want to see?\n1. User Options\n2. Admin Options\n3. Group Options");
            ans = in.nextLine();
            
            if(ans.equals("User Options")){
             
                System.out.println("User Options:\n1. Make a Post\n2. Edit Profile\n3. Subscribe to a User\n4. View Feed\n5. Search for User\n6. Search for Group or Tag\n7. Logout");
                ans = in.nextLine();
                
                if (ans.equals("Make a Post")) {

                    String text;
                    DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                    String postDate;
                    String postAdd;

                    System.out.println("Type your post!");
                    text = in.nextLine();
                    text += " ";
                    Date date = new Date();
                    postDate = dateFormat.format(date);

                    System.out.println("This is your post: " + text);
                    System.out.println("This is the date it was posted: " + postDate);

                    for (int i = 0; i < (text.length() - 1); i++){
                        String tempText = text;

                        if (text.charAt(i) == '~') {

                            tempText = text.substring(i);
                            postAdd = text.substring(i, tempText.indexOf(' ') + i);
                            System.out.println("Your post belongs to this group: " + postAdd);

                        }

                        if (text.charAt(i) == '#') {

                            tempText = text.substring(i);
                            postAdd = text.substring(i, tempText.indexOf(' ') + i);
                            System.out.println("Your post belongs to this tag: " + postAdd);

                        }

                        if (text.charAt(i) == '@'){

                            tempText = text.substring(i);
                            postAdd = text.substring(i, tempText.indexOf(' ') + i);
                            System.out.println("Your post will alert this user: " + postAdd);
                        }


                    }//for loop

                }//if (ans.equals("Make a Post"))
                
                if (ans.equals("Edit Profile")){
                    
                    gibbler.EditProfile(current);
                    
                }
                
                if (ans.equals("Subscribe to a User")){
                    
                    //Flannery's code goes here
                    
                }
                
                if (ans.equals("View Feed")){
                    
                    user.viewFeed(current.getUN());
                    
                }
                
                if (ans.equals("Search for a User")){
                    
                    String sea;
                    
                    System.out.println("What is the name of the user you want to search for?");
                    sea = in.nextLine();
                    
                    Search find = new Search();
                    find.SearchByUser(sea);
                }
                
                if (ans.equals("Search for Group or Tag")){
                    
                    String sea;
                    
                    System.out.println("What is the tag or group that you want to search for? Please include the & or #");
                    sea = in.nextLine();
                    
                    Search find = new Search();
                    find.SearchByHash(sea);
                    
                }
                
                if (ans.equals("Logout")){

                    System.out.println("Goodbye, Friend");

                }//if (ans.equals("Logout"))
                
            }//if (ans.equals("User Options"))
            
            else if (ans.equals("Admin Options")){
             
                System.out.println("Admin Options:\n1. Delete a User\n2. Delete a Group");
                ans = in.nextLine();
                
                if (ans.equals("Delete a User")){
                    
                    //Flannery's code goes here
                    
                }
                
                if (ans.equals("Delete a Group")){
                    
                    //Flannery's code goes here
                    
                }
                
            }//else if (ans.equals("Admin Options"))
            
            else if (ans.equals("Group Options")){
             
                System.out.println("Group Options:\n1. Create a Group\n2. Delete a Group");
                ans = in.nextLine();
                
                if (ans.equals("Create Group")) {

                    String groupName;

                    System.out.println("What do you want to name your group?");
                    groupName = in.nextLine();

                    if (!alreadyExists) {

                        /*Create group table with user.name, user.iD, and add creator to followers*/

                    }
                }//if (ans.equals("Create Group"))
                
                if (ans.equals("Delete a Group")){
                    
                    //Flannery's code goes here.
                    
                }
                
            }//else if (ans.equals("Group Options"))
            
        }//while(ans.equals("Logout"))
        
        
    }//main
    
    
    
    public boolean Register(){
        boolean registered = false;
        boolean alreadyExists = false;
        Scanner scan = new Scanner(System.in);
        String username = "";
        String password = "";
        String confirm = "";
        String sql = "";
        int result = 0;
        
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mysql", "root", "8e7e082e");
            //System.out.println("Connection successful");
            
            Statement statement = conn.createStatement();
            sql = "use mydb;";
            result = statement.executeUpdate(sql);
            //System.out.println("Result of SQL update: " + result);

            System.out.println("Enter your desired username:");
            username = scan.nextLine();

            System.out.println("Enter your password:");
            password = scan.nextLine();

            System.out.println("Confirm your password:");
            confirm = scan.nextLine();

            while(!confirm.equals(password)){
                System.out.println("Those passwords did not match.");
                System.out.println("Enter your password:");
                password = scan.nextLine();

                System.out.println("Confirm your password:");
                confirm = scan.nextLine();
            }
            
            statement = conn.createStatement();
            sql = "SELECT MAX(userids) AS userids FROM users;";
            System.out.println(sql);
            ResultSet rs = statement.executeQuery(sql);
            rs.next();
            int highestID = rs.getInt("userids");
            //System.out.println(highestID + " is the highest ID");
            int newID = highestID + 1;
            //System.out.println(newID + " is the new ID");
            
            statement = conn.createStatement();
            sql = ("SELECT userids FROM users WHERE usernames = '" 
                    + username +"';");
            ResultSet rs1 = statement.executeQuery(sql);
            alreadyExists = rs1.next();
            
            if(!alreadyExists){
                statement = conn.createStatement();
                sql = ("INSERT INTO users (usernames, userids, password, firstname, lastName) VALUES ('" 
                        + username + "', " + newID + ", '"+ password +"', '', '');");
                System.out.println(sql);
                result = statement.executeUpdate(sql);
                
                statement = conn.createStatement();
                sql = ("CREATE TABLE `mydb`.`" + username + "` (\n" +
                "  `Followers` VARCHAR(45) NULL,\n" +
                "  `Groups` VARCHAR(45) NULL,\n" +
                "  `Users` VARCHAR(45) NULL);");
                //System.out.println(sql);
                result = statement.executeUpdate(sql);
            
                System.out.println("Registration successful. You may now log in.");
                registered = true;
                return registered;
            }
            else{
                System.out.println("That username already exists.");
            }
            
            conn.close();
        } catch (SQLException ex) {
	    // handle any SQL errors
	    System.out.println("SQLException: " + ex.getMessage());
	    System.out.println("SQLState: " + ex.getSQLState());
	    System.out.println("VendorError: " + ex.getErrorCode());
        }
        
        System.out.println("Registration failed.");
        return registered;
    }//register
    
    
    
    
    
    
    public boolean RegisterAsAdmin(){
        boolean registered = false;
        boolean alreadyExists = false;
        Scanner scan = new Scanner(System.in);
        String username = "";
        String password = "";
        String confirm = "";
        String sql = "";
        int result = 0;
        
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mysql", "root", "8e7e082e");
            //System.out.println("Connection successful");
            
            Statement statement = conn.createStatement();
            sql = "use mydb;";
            result = statement.executeUpdate(sql);
            //System.out.println("Result of SQL update: " + result);

            System.out.println("Enter your desired username:");
            username = scan.nextLine();

            System.out.println("Enter your password:");
            password = scan.nextLine();

            System.out.println("Confirm your password:");
            confirm = scan.nextLine();

            while(!confirm.equals(password)){
                System.out.println("Those passwords did not match.");
                System.out.println("Enter your password:");
                password = scan.nextLine();

                System.out.println("Confirm your password:");
                confirm = scan.nextLine();
            }
            
            statement = conn.createStatement();
            sql = "SELECT userids FROM users WHERE userids < 1000 HAVING MAX(userids);";
            //sql = "SELECT MAX(userids) AS userids FROM users;";
            //System.out.println(sql);
            ResultSet rs = statement.executeQuery(sql);
            rs.next();
            int highestID = rs.getInt("userids");
            //System.out.println(highestID + " is the highest ID");
            int newID = highestID + 1;
            //System.out.println(newID + " is the new ID");
            
            statement = conn.createStatement();
            sql = ("SELECT userids FROM users WHERE usernames = '" 
                    + username +"';");
            ResultSet rs1 = statement.executeQuery(sql);
            alreadyExists = rs1.next();
            
            if(!alreadyExists){
                statement = conn.createStatement();
                sql = ("INSERT INTO users (usernames, userids, password, firstname, lastName) VALUES ('" 
                        + username + "', " + newID + ", '"+ password +"', '', '');");
                //System.out.println(sql);
                result = statement.executeUpdate(sql);
                
                statement = conn.createStatement();
                sql = ("CREATE TABLE `mydb`.`" + username + "` (\n" +
                "  `Followers` VARCHAR(45) NULL,\n" +
                "  `Groups` VARCHAR(45) NULL,\n" +
                "  `Users` VARCHAR(45) NULL);");
                //System.out.println(sql);
                result = statement.executeUpdate(sql);
            
                System.out.println("Registration successful. You may now log in.");
                registered = true;
                return registered;
            }
            else{
                System.out.println("That username already exists.");
            }
            
            conn.close();
        } catch (SQLException ex) {
	    // handle any SQL errors
	    System.out.println("SQLException: " + ex.getMessage());
	    System.out.println("SQLState: " + ex.getSQLState());
	    System.out.println("VendorError: " + ex.getErrorCode());
        }
        
        System.out.println("Registration failed.");
        return registered;
    }//register as admin
    
    
    public User LogIn(){
        User currentUser = new User();
        boolean userExists = true;
        Scanner scan = new Scanner(System.in);
        String username;
        String storedPassword = "";
        String password;
        String sql = "";
        int userID = 0;
        int result = 0;
        int count = 0;
        
        try{
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mysql", "root", "8e7e082e");
            //System.out.println("Connection successful");
            
            Statement statement = conn.createStatement();
            sql = "use mydb;";
            result = statement.executeUpdate(sql);
            //System.out.println("Result of SQL update: " + result);

            System.out.println("Enter your username:");
            username = scan.nextLine();
            
            statement = conn.createStatement();
            sql = ("SELECT usernames FROM users WHERE usernames = '" 
                    + username +"';");
            //System.out.println(sql);
            ResultSet rs1 = statement.executeQuery(sql);
            userExists = rs1.next();
            
            if(!userExists){
                System.out.println("That user does not exist.");
            } else {
                System.out.println("Enter your password:");
                password = scan.nextLine();

                statement = conn.createStatement();
                sql = ("SELECT password FROM users WHERE usernames = '" 
                        + username +"';");
                //System.out.println(sql);
                ResultSet rs2 = statement.executeQuery(sql);
                rs2.next();
                storedPassword = rs2.getString("password");

                while(!storedPassword.equals(password) && count < 3){
                    System.out.println("Those passwords do not match.");
                    System.out.println("Enter your password:");
                    password = scan.nextLine();
                    
                    count = count + 1;
                }
                
                if(count == 3){
                    System.out.println("You have attempted to enter this password too many times.");
                }else{
                    currentUser.setUN(username);
                    currentUser.setID(userID);
                    System.out.println("You are now logged in.");
                }  
            }
            conn.close();
        }catch (SQLException ex) {
	    // handle any SQL errors
	    System.out.println("SQLException: " + ex.getMessage());
	    System.out.println("SQLState: " + ex.getSQLState());
	    System.out.println("VendorError: " + ex.getErrorCode());
        }
        
        return currentUser;
    }//login
    
    public void EditProfile(User person){
        
        Scanner in = new Scanner(System.in);
        String fName;
        String lName;
        
        System.out.println("What is your first name?");
        fName = in.nextLine();
        
        System.out.println("What is your last name?");
        lName = in.nextLine();
        
        /* Add their f/l name to their profile. */
        
    }
}
